const nodemailer = require('nodemailer');

class EmailService {
  constructor() {
    // Configure your email service here
    // For development, you can use services like Gmail, SendGrid, or Mailgun
    this.transporter = nodemailer.createTransport({
      // Example configuration for Gmail
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER || 'your-email@gmail.com',
        pass: process.env.EMAIL_PASS || 'your-app-password'
      }
    });

    // For production, consider using services like SendGrid:
    /*
    this.transporter = nodemailer.createTransport({
      service: 'SendGrid',
      auth: {
        user: 'apikey',
        pass: process.env.SENDGRID_API_KEY
      }
    });
    */
  }

  async sendCredentialsEmail(email, name, username, password) {
    try {
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'noreply@sampoornaangan.gov.in',
        to: email,
        subject: 'SampoornaAngan - Your Account Credentials',
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Account Credentials - SampoornaAngan</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
              .credentials { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea; }
              .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 5px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>Welcome to SampoornaAngan</h1>
                <p>Your account has been created successfully</p>
              </div>
              
              <div class="content">
                <h2>Dear ${name},</h2>
                
                <p>Your account has been created for the SampoornaAngan system by the administrator. You can now access the platform using the credentials below:</p>
                
                <div class="credentials">
                  <h3>Login Credentials:</h3>
                  <p><strong>Username/Email:</strong> ${username}</p>
                  <p><strong>Temporary Password:</strong> <code style="background: #f1f1f1; padding: 4px 8px; border-radius: 4px; font-family: monospace;">${password}</code></p>
                </div>
                
                <div class="warning">
                  <strong>⚠️ Important Security Notice:</strong>
                  <ul>
                    <li>This is a temporary password generated by the system</li>
                    <li>Please change your password immediately after your first login</li>
                    <li>Do not share these credentials with anyone</li>
                    <li>Keep your login information secure</li>
                  </ul>
                </div>
                
                <div style="text-align: center;">
                  <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/login" class="button">
                    Login to Your Account
                  </a>
                </div>
                
                <h3>Getting Started:</h3>
                <ol>
                  <li>Click the login button above or visit the SampoornaAngan website</li>
                  <li>Enter your email and temporary password</li>
                  <li>Select your role from the dropdown menu</li>
                  <li>Change your password in the profile settings</li>
                  <li>Complete your profile information</li>
                </ol>
                
                <p>If you have any questions or need assistance, please contact your supervisor or the system administrator.</p>
                
                <div class="footer">
                  <p>This email was sent automatically by the SampoornaAngan system.</p>
                  <p>© 2024 SampoornaAngan - Government of India Initiative</p>
                  <p>Please do not reply to this email.</p>
                </div>
              </div>
            </div>
          </body>
          </html>
        `,
        text: `
Dear ${name},

Your account has been created for the SampoornaAngan system.

Login Credentials:
Username/Email: ${username}
Temporary Password: ${password}

Please login at: ${process.env.FRONTEND_URL || 'http://localhost:3000'}/login

IMPORTANT: Please change your password after your first login for security reasons.

Best regards,
SampoornaAngan Admin Team
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('Email sent successfully:', result.messageId);
      
      return {
        success: true,
        messageId: result.messageId
      };
      
    } catch (error) {
      console.error('Email sending error:', error);
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }

  async sendPasswordResetEmail(email, name, resetToken) {
    try {
      const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
      
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'noreply@sampoornaangan.gov.in',
        to: email,
        subject: 'SampoornaAngan - Password Reset Request',
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Password Reset - SampoornaAngan</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
              .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 5px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>Password Reset Request</h1>
              </div>
              
              <div class="content">
                <h2>Dear ${name},</h2>
                
                <p>We received a request to reset your password for your SampoornaAngan account.</p>
                
                <div style="text-align: center;">
                  <a href="${resetUrl}" class="button">
                    Reset Your Password
                  </a>
                </div>
                
                <div class="warning">
                  <strong>⚠️ Security Notice:</strong>
                  <ul>
                    <li>This link will expire in 1 hour for security reasons</li>
                    <li>If you didn't request this reset, please ignore this email</li>
                    <li>Your password will remain unchanged until you create a new one</li>
                  </ul>
                </div>
                
                <p>If the button doesn't work, copy and paste this link into your browser:</p>
                <p style="word-break: break-all; background: #f1f1f1; padding: 10px; border-radius: 4px;">${resetUrl}</p>
                
                <div class="footer">
                  <p>This email was sent automatically by the SampoornaAngan system.</p>
                  <p>© 2024 SampoornaAngan - Government of India Initiative</p>
                  <p>Please do not reply to this email.</p>
                </div>
              </div>
            </div>
          </body>
          </html>
        `,
        text: `
Dear ${name},

We received a request to reset your password for your SampoornaAngan account.

Please click the following link to reset your password:
${resetUrl}

This link will expire in 1 hour for security reasons.

If you didn't request this reset, please ignore this email.

Best regards,
SampoornaAngan Admin Team
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('Password reset email sent successfully:', result.messageId);
      
      return {
        success: true,
        messageId: result.messageId
      };
      
    } catch (error) {
      console.error('Password reset email error:', error);
      throw new Error(`Failed to send password reset email: ${error.message}`);
    }
  }

  // Generic email sending method
  async sendEmail({ to, subject, html, text }) {
    try {
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'noreply@sampoornaangan.gov.in',
        to,
        subject,
        html,
        text
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('Email sent successfully:', result.messageId);
      
      return {
        success: true,
        messageId: result.messageId
      };
      
    } catch (error) {
      console.error('Email sending error:', error);
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }

  // Test email configuration
  async testConnection() {
    try {
      await this.transporter.verify();
      console.log('Email service is ready');
      return { success: true, message: 'Email service is configured correctly' };
    } catch (error) {
      console.error('Email service configuration error:', error);
      return { success: false, message: error.message };
    }
  }
}

module.exports = new EmailService();